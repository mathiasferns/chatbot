{
    "id": "697fb9c8-9f17-46e2-b61d-819c5dd2be61",
    "data": {
        "nodes": [
            {
                "id": "Prompt-AN6PM",
                "type": "genericNode",
                "position": {
                    "x": 1011.3384956113682,
                    "y": -621.5761435881838
                },
                "data": {
                    "type": "Prompt",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_build_config[\"template\"])\n        return frontend_node\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "template": {
                                "trace_as_input": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Hey, answer the users questions based on the following context:\n\nThe context is this: {context}\n\nAnd this is the message history: {history}\n\nThe users question is this: {question}",
                                "name": "template",
                                "display_name": "Template",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "prompt",
                                "load_from_db": false
                            },
                            "context": {
                                "field_type": "str",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "context",
                                "display_name": "context",
                                "advanced": false,
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "type": "str"
                            },
                            "history": {
                                "field_type": "str",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "history",
                                "display_name": "history",
                                "advanced": false,
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "type": "str"
                            },
                            "question": {
                                "field_type": "str",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "question",
                                "display_name": "question",
                                "advanced": false,
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "is_input": null,
                        "is_output": null,
                        "is_composition": null,
                        "base_classes": [
                            "Message"
                        ],
                        "name": "",
                        "display_name": "Prompt",
                        "documentation": "",
                        "custom_fields": {
                            "template": [
                                "context",
                                "history",
                                "question"
                            ]
                        },
                        "output_types": [],
                        "full_path": null,
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "prompt",
                                "hidden": false,
                                "display_name": "Prompt Message",
                                "method": "build_prompt",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "template"
                        ],
                        "beta": false,
                        "error": null,
                        "edited": false
                    },
                    "id": "Prompt-AN6PM",
                    "description": "Create a prompt template with dynamic variables.",
                    "display_name": "Prompt"
                },
                "selected": false,
                "width": 384,
                "height": 609,
                "positionAbsolute": {
                    "x": 1011.3384956113682,
                    "y": -621.5761435881838
                },
                "dragging": false
            },
            {
                "id": "Memory-v1D7b",
                "type": "genericNode",
                "position": {
                    "x": -634.2268601839019,
                    "y": 225.36676784494227
                },
                "data": {
                    "type": "Memory",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import get_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\", \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"Session ID of the chat history.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chat History\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        messages = get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        self.status = messages\n        return messages\n\n    def retrieve_messages_as_text(self) -> Message:\n        messages_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = messages_text\n        return Message(text=messages_text)\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "n_messages": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 100,
                                "name": "n_messages",
                                "display_name": "Number of Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Number of messages to retrieve.",
                                "title_case": false,
                                "type": "int"
                            },
                            "order": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Ascending",
                                    "Descending"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Ascending",
                                "name": "order",
                                "display_name": "Order",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Order of the messages.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User",
                                    "Machine and User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Machine and User",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID of the chat history.",
                                "title_case": false,
                                "type": "str"
                            },
                            "template": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "{sender_name}: {text}",
                                "name": "template",
                                "display_name": "Template",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Retrieves stored chat messages.",
                        "icon": "message-square-more",
                        "base_classes": [
                            "Data",
                            "Message"
                        ],
                        "display_name": "Chat Memory",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "messages",
                                "display_name": "Chat History",
                                "method": "retrieve_messages",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "messages_text",
                                "display_name": "Messages (Text)",
                                "method": "retrieve_messages_as_text",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "sender",
                            "sender_name",
                            "n_messages",
                            "session_id",
                            "order",
                            "template"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "Memory-v1D7b",
                    "description": "Retrieves stored chat messages.",
                    "display_name": "Chat Memory"
                },
                "selected": false,
                "width": 384,
                "height": 356,
                "dragging": false,
                "positionAbsolute": {
                    "x": -634.2268601839019,
                    "y": 225.36676784494227
                }
            },
            {
                "id": "CohereModel-4l2Yf",
                "type": "genericNode",
                "position": {
                    "x": 1425.1515341517088,
                    "y": 272.0501884542724
                },
                "data": {
                    "type": "CohereModel",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langchain_cohere import ChatCohere\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, FloatInput, MessageInput, SecretStrInput, StrInput\n\n\nclass CohereComponent(LCModelComponent):\n    display_name = \"Cohere\"\n    description = \"Generate text using Cohere LLMs.\"\n    documentation = \"https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere\"\n    icon = \"Cohere\"\n    name = \"CohereModel\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"cohere_api_key\",\n            display_name=\"Cohere API Key\",\n            info=\"The Cohere API Key to use for the Cohere model.\",\n            advanced=False,\n            value=\"COHERE_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.75),\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        cohere_api_key = self.cohere_api_key\n        temperature = self.temperature\n\n        if cohere_api_key:\n            api_key = SecretStr(cohere_api_key)\n        else:\n            api_key = None\n\n        output = ChatCohere(\n            temperature=temperature or 0.75,\n            cohere_api_key=api_key,\n        )\n\n        return output  # type: ignore\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "cohere_api_key": {
                                "load_from_db": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Cohere_api_key",
                                "name": "cohere_api_key",
                                "display_name": "Cohere API Key",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "The Cohere API Key to use for the Cohere model.",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "stream": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "stream",
                                "display_name": "Stream",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "system_message": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "system_message",
                                "display_name": "System Message",
                                "advanced": true,
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "title_case": false,
                                "type": "str"
                            },
                            "temperature": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 0.75,
                                "name": "temperature",
                                "display_name": "Temperature",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "float"
                            }
                        },
                        "description": "Generate text using Cohere LLMs.",
                        "icon": "Cohere",
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "display_name": "Cohere",
                        "documentation": "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text_output",
                                "display_name": "Text",
                                "method": "text_response",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            },
                            {
                                "types": [
                                    "LanguageModel"
                                ],
                                "selected": "LanguageModel",
                                "name": "model_output",
                                "display_name": "Language Model",
                                "method": "build_model",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "cohere_api_key",
                            "temperature",
                            "input_value",
                            "stream",
                            "system_message"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "CohereModel-4l2Yf",
                    "description": "Generate text using Cohere LLMs.",
                    "display_name": "Cohere"
                },
                "selected": false,
                "width": 384,
                "height": 535,
                "positionAbsolute": {
                    "x": 1425.1515341517088,
                    "y": 272.0501884542724
                },
                "dragging": false
            },
            {
                "id": "ChatOutput-7Nnei",
                "type": "genericNode",
                "position": {
                    "x": 1954.6582336638091,
                    "y": 566.8402450523722
                },
                "data": {
                    "type": "ChatOutput",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "data_template": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "{text}",
                                "name": "data_template",
                                "display_name": "Data Template",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "title_case": false,
                                "type": "str"
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Machine",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "AI",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Display a chat message in the Playground.",
                        "icon": "ChatOutput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Output",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "ChatOutput-7Nnei",
                    "description": "Display a chat message in the Playground.",
                    "display_name": "Chat Output"
                },
                "selected": false,
                "width": 384,
                "height": 308,
                "positionAbsolute": {
                    "x": 1954.6582336638091,
                    "y": 566.8402450523722
                },
                "dragging": false
            },
            {
                "id": "ChatInput-H54VO",
                "type": "genericNode",
                "position": {
                    "x": -178.57013012569632,
                    "y": -234.19291475891083
                },
                "data": {
                    "type": "ChatInput",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "files": {
                                "trace_as_metadata": true,
                                "file_path": "",
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "files",
                                "display_name": "Files",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Files to be sent with the message.",
                                "title_case": false,
                                "type": "file"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "flop joke",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Terrence",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Get chat inputs from the Playground.",
                        "icon": "ChatInput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Input",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "ChatInput-H54VO",
                    "description": "Get chat inputs from the Playground.",
                    "display_name": "Chat Input"
                },
                "selected": false,
                "width": 384,
                "height": 402,
                "positionAbsolute": {
                    "x": -178.57013012569632,
                    "y": -234.19291475891083
                },
                "dragging": false
            },
            {
                "id": "CohereEmbeddings-j7UgM",
                "type": "genericNode",
                "position": {
                    "x": -497.58346205574986,
                    "y": 1122.029093876754
                },
                "data": {
                    "type": "CohereEmbeddings",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langchain_community.embeddings.cohere import CohereEmbeddings\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"cohere_api_key\", display_name=\"Cohere API Key\"),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=True,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return CohereEmbeddings(  # type: ignore\n            cohere_api_key=self.cohere_api_key,\n            model=self.model,\n            truncate=self.truncate,\n            max_retries=self.max_retries,\n            user_agent=self.user_agent,\n            request_timeout=self.request_timeout or None,\n        )\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "cohere_api_key": {
                                "load_from_db": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Cohere_api_key",
                                "name": "cohere_api_key",
                                "display_name": "Cohere API Key",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            },
                            "max_retries": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 3,
                                "name": "max_retries",
                                "display_name": "Max Retries",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int"
                            },
                            "model": {
                                "trace_as_metadata": true,
                                "options": [
                                    "embed-english-v2.0",
                                    "embed-multilingual-v2.0",
                                    "embed-english-light-v2.0",
                                    "embed-multilingual-light-v2.0"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "embed-english-v2.0",
                                "name": "model",
                                "display_name": "Model",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "request_timeout": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "request_timeout",
                                "display_name": "Request Timeout",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "float"
                            },
                            "truncate": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "truncate",
                                "display_name": "Truncate",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "user_agent": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "langchain",
                                "name": "user_agent",
                                "display_name": "User Agent",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Generate embeddings using Cohere models.",
                        "icon": "Cohere",
                        "base_classes": [
                            "Embeddings"
                        ],
                        "display_name": "Cohere Embeddings",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Embeddings"
                                ],
                                "selected": "Embeddings",
                                "name": "embeddings",
                                "display_name": "Embeddings",
                                "method": "build_embeddings",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "cohere_api_key",
                            "model",
                            "truncate",
                            "max_retries",
                            "user_agent",
                            "request_timeout"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "CohereEmbeddings-j7UgM",
                    "description": "Generate embeddings using Cohere models.",
                    "display_name": "Cohere Embeddings"
                },
                "selected": false,
                "width": 384,
                "height": 308,
                "dragging": false,
                "positionAbsolute": {
                    "x": -497.58346205574986,
                    "y": 1122.029093876754
                }
            },
            {
                "id": "SplitText-TbaEX",
                "type": "genericNode",
                "position": {
                    "x": -429.4362348817017,
                    "y": 1594.26187264851
                },
                "data": {
                    "type": "SplitText",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "data_inputs": {
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "data_inputs",
                                "display_name": "Data Inputs",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "The data to split.",
                                "title_case": false,
                                "type": "other"
                            },
                            "chunk_overlap": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 200,
                                "name": "chunk_overlap",
                                "display_name": "Chunk Overlap",
                                "advanced": false,
                                "dynamic": false,
                                "info": "Number of characters to overlap between chunks.",
                                "title_case": false,
                                "type": "int"
                            },
                            "chunk_size": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 1000,
                                "name": "chunk_size",
                                "display_name": "Chunk Size",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The maximum number of characters in each chunk.",
                                "title_case": false,
                                "type": "int"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from typing import List\n\nfrom langchain_text_splitters import CharacterTextSplitter\n\nfrom langflow.custom import Component\nfrom langflow.io import HandleInput, IntInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        data = []\n        for doc in docs:\n            data.append(Data(text=doc.page_content, data=doc.metadata))\n        return data\n\n    def split_text(self) -> List[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = []\n        for _input in self.data_inputs:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "separator": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "\n",
                                "name": "separator",
                                "display_name": "Separator",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The character to split on. Defaults to newline.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Split text into chunks based on specified criteria.",
                        "icon": "scissors-line-dashed",
                        "base_classes": [
                            "Data"
                        ],
                        "display_name": "Split Text",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "chunks",
                                "display_name": "Chunks",
                                "method": "split_text",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "data_inputs",
                            "chunk_overlap",
                            "chunk_size",
                            "separator"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "SplitText-TbaEX",
                    "description": "Split text into chunks based on specified criteria.",
                    "display_name": "Split Text"
                },
                "selected": false,
                "width": 384,
                "height": 527,
                "positionAbsolute": {
                    "x": -429.4362348817017,
                    "y": 1594.26187264851
                },
                "dragging": false
            },
            {
                "id": "AstraDB-JiG6O",
                "type": "genericNode",
                "position": {
                    "x": 742.7745218162669,
                    "y": 1106.5115457311015
                },
                "data": {
                    "type": "AstraDB",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "embedding": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "embedding",
                                "display_name": "Embedding or Astra Vectorize",
                                "advanced": false,
                                "input_types": [
                                    "Embeddings",
                                    "dict"
                                ],
                                "dynamic": false,
                                "info": "Allows either an embedding model or an Astra Vectorize configuration.",
                                "title_case": false,
                                "type": "other"
                            },
                            "ingest_data": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "ingest_data",
                                "display_name": "Ingest Data",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other"
                            },
                            "api_endpoint": {
                                "load_from_db": true,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "value": "endpoint",
                                "name": "api_endpoint",
                                "display_name": "API Endpoint",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "API endpoint URL for the Astra DB service.",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            },
                            "batch_size": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "batch_size",
                                "display_name": "Batch Size",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional number of data to process in a single batch.",
                                "title_case": false,
                                "type": "int"
                            },
                            "bulk_delete_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "bulk_delete_concurrency",
                                "display_name": "Bulk Delete Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk delete operations.",
                                "title_case": false,
                                "type": "int"
                            },
                            "bulk_insert_batch_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "bulk_insert_batch_concurrency",
                                "display_name": "Bulk Insert Batch Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk insert operations.",
                                "title_case": false,
                                "type": "int"
                            },
                            "bulk_insert_overwrite_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "bulk_insert_overwrite_concurrency",
                                "display_name": "Bulk Insert Overwrite Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                                "title_case": false,
                                "type": "int"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langchain_core.vectorstores import VectorStore\nfrom loguru import logger\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import DictInput, FloatInput\nfrom langflow.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    _cached_vectorstore: VectorStore | None = None\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n            info=\"Allows either an embedding model or an Astra Vectorize configuration.\",  # TODO: This should be optional, but need to refactor langchain-astradb first.\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    def _build_vector_store(self):\n        # cache the vector store to avoid re-initializing and ingest data again\n        if self._cached_vectorstore:\n            return self._cached_vectorstore\n\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options),\n                \"collection_embedding_api_key\": self.embedding.get(\"collection_embedding_api_key\"),\n            }\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._add_documents_to_vector_store(vector_store)\n\n        self._cached_vectorstore = vector_store\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self._build_vector_store()\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n\n    def build_vector_store(self):\n        vector_store = self._build_vector_store()\n        return vector_store\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "collection_indexing_policy": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "collection_indexing_policy",
                                "display_name": "Collection Indexing Policy",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional dictionary defining the indexing policy for the collection.",
                                "title_case": false,
                                "type": "str"
                            },
                            "collection_name": {
                                "trace_as_metadata": true,
                                "load_from_db": true,
                                "list": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "value": "collection",
                                "name": "collection_name",
                                "display_name": "Collection Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                                "title_case": false,
                                "type": "str"
                            },
                            "metadata_indexing_exclude": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "metadata_indexing_exclude",
                                "display_name": "Metadata Indexing Exclude",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional list of metadata fields to exclude from the indexing.",
                                "title_case": false,
                                "type": "str"
                            },
                            "metadata_indexing_include": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "metadata_indexing_include",
                                "display_name": "Metadata Indexing Include",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional list of metadata fields to include in the indexing.",
                                "title_case": false,
                                "type": "str"
                            },
                            "metric": {
                                "trace_as_metadata": true,
                                "options": [
                                    "cosine",
                                    "dot_product",
                                    "euclidean"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "metric",
                                "display_name": "Metric",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional distance metric for vector comparisons in the vector store.",
                                "title_case": false,
                                "type": "str"
                            },
                            "namespace": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "namespace",
                                "display_name": "Namespace",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional namespace within Astra DB to use for the collection.",
                                "title_case": false,
                                "type": "str"
                            },
                            "number_of_results": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 4,
                                "name": "number_of_results",
                                "display_name": "Number of Results",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Number of results to return.",
                                "title_case": false,
                                "type": "int"
                            },
                            "pre_delete_collection": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "pre_delete_collection",
                                "display_name": "Pre Delete Collection",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "search_filter": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "search_filter",
                                "display_name": "Search Metadata Filter",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional dictionary of filters to apply to the search query.",
                                "title_case": false,
                                "type": "dict"
                            },
                            "search_input": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "search_input",
                                "display_name": "Search Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "search_score_threshold": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 0,
                                "name": "search_score_threshold",
                                "display_name": "Search Score Threshold",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                                "title_case": false,
                                "type": "float"
                            },
                            "search_type": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Similarity",
                                    "Similarity with score threshold",
                                    "MMR (Max Marginal Relevance)"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Similarity",
                                "name": "search_type",
                                "display_name": "Search Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Search type to use",
                                "title_case": false,
                                "type": "str"
                            },
                            "setup_mode": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Sync",
                                    "Async",
                                    "Off"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Sync",
                                "name": "setup_mode",
                                "display_name": "Setup Mode",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.",
                                "title_case": false,
                                "type": "str"
                            },
                            "token": {
                                "load_from_db": true,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "value": "token",
                                "name": "token",
                                "display_name": "Astra DB Application Token",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "Authentication token for accessing Astra DB.",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            }
                        },
                        "description": "Implementation of Vector Store using Astra DB with search capabilities",
                        "icon": "AstraDB",
                        "base_classes": [
                            "Data",
                            "Retriever"
                        ],
                        "display_name": "Astra DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/astradb",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Retriever"
                                ],
                                "selected": "Retriever",
                                "name": "base_retriever",
                                "display_name": "Retriever",
                                "method": "build_base_retriever",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "search_results",
                                "display_name": "Search Results",
                                "method": "search_documents",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "collection_name",
                            "token",
                            "api_endpoint",
                            "search_input",
                            "ingest_data",
                            "namespace",
                            "metric",
                            "batch_size",
                            "bulk_insert_batch_concurrency",
                            "bulk_insert_overwrite_concurrency",
                            "bulk_delete_concurrency",
                            "setup_mode",
                            "pre_delete_collection",
                            "metadata_indexing_include",
                            "embedding",
                            "metadata_indexing_exclude",
                            "collection_indexing_policy",
                            "number_of_results",
                            "search_type",
                            "search_score_threshold",
                            "search_filter"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "AstraDB-JiG6O"
                },
                "selected": false,
                "width": 384,
                "height": 753,
                "dragging": false
            },
            {
                "id": "ParseData-qjhsy",
                "type": "genericNode",
                "position": {
                    "x": 572.7573897839491,
                    "y": 245.3368793149246
                },
                "data": {
                    "type": "ParseData",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "data": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "data",
                                "display_name": "Data",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "The data to convert to text.",
                                "title_case": false,
                                "type": "other"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "sep": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "\n",
                                "name": "sep",
                                "display_name": "Separator",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "template": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "{text}",
                                "name": "template",
                                "display_name": "Template",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Convert Data into plain text following a specified template.",
                        "icon": "braces",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Parse Data",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text",
                                "display_name": "Text",
                                "method": "parse_data",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "data",
                            "template",
                            "sep"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "ParseData-qjhsy"
                },
                "selected": false,
                "width": 384,
                "height": 384,
                "positionAbsolute": {
                    "x": 572.7573897839491,
                    "y": 245.3368793149246
                },
                "dragging": false
            },
            {
                "id": "AstraDB-Iq4F1",
                "type": "genericNode",
                "position": {
                    "x": 39.35373990120081,
                    "y": 407.4184900785235
                },
                "data": {
                    "type": "AstraDB",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "embedding": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "embedding",
                                "display_name": "Embedding or Astra Vectorize",
                                "advanced": false,
                                "input_types": [
                                    "Embeddings",
                                    "dict"
                                ],
                                "dynamic": false,
                                "info": "Allows either an embedding model or an Astra Vectorize configuration.",
                                "title_case": false,
                                "type": "other"
                            },
                            "ingest_data": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "ingest_data",
                                "display_name": "Ingest Data",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other"
                            },
                            "api_endpoint": {
                                "load_from_db": true,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "value": "endpoint",
                                "name": "api_endpoint",
                                "display_name": "API Endpoint",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "API endpoint URL for the Astra DB service.",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            },
                            "batch_size": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "batch_size",
                                "display_name": "Batch Size",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional number of data to process in a single batch.",
                                "title_case": false,
                                "type": "int"
                            },
                            "bulk_delete_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "bulk_delete_concurrency",
                                "display_name": "Bulk Delete Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk delete operations.",
                                "title_case": false,
                                "type": "int"
                            },
                            "bulk_insert_batch_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "bulk_insert_batch_concurrency",
                                "display_name": "Bulk Insert Batch Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk insert operations.",
                                "title_case": false,
                                "type": "int"
                            },
                            "bulk_insert_overwrite_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "bulk_insert_overwrite_concurrency",
                                "display_name": "Bulk Insert Overwrite Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                                "title_case": false,
                                "type": "int"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langchain_core.vectorstores import VectorStore\nfrom loguru import logger\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import DictInput, FloatInput\nfrom langflow.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    _cached_vectorstore: VectorStore | None = None\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n            info=\"Allows either an embedding model or an Astra Vectorize configuration.\",  # TODO: This should be optional, but need to refactor langchain-astradb first.\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    def _build_vector_store(self):\n        # cache the vector store to avoid re-initializing and ingest data again\n        if self._cached_vectorstore:\n            return self._cached_vectorstore\n\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options),\n                \"collection_embedding_api_key\": self.embedding.get(\"collection_embedding_api_key\"),\n            }\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._add_documents_to_vector_store(vector_store)\n\n        self._cached_vectorstore = vector_store\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self._build_vector_store()\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n\n    def build_vector_store(self):\n        vector_store = self._build_vector_store()\n        return vector_store\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "collection_indexing_policy": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "collection_indexing_policy",
                                "display_name": "Collection Indexing Policy",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional dictionary defining the indexing policy for the collection.",
                                "title_case": false,
                                "type": "str"
                            },
                            "collection_name": {
                                "trace_as_metadata": true,
                                "load_from_db": true,
                                "list": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "value": "collection",
                                "name": "collection_name",
                                "display_name": "Collection Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                                "title_case": false,
                                "type": "str"
                            },
                            "metadata_indexing_exclude": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "metadata_indexing_exclude",
                                "display_name": "Metadata Indexing Exclude",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional list of metadata fields to exclude from the indexing.",
                                "title_case": false,
                                "type": "str"
                            },
                            "metadata_indexing_include": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "metadata_indexing_include",
                                "display_name": "Metadata Indexing Include",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional list of metadata fields to include in the indexing.",
                                "title_case": false,
                                "type": "str"
                            },
                            "metric": {
                                "trace_as_metadata": true,
                                "options": [
                                    "cosine",
                                    "dot_product",
                                    "euclidean"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "metric",
                                "display_name": "Metric",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional distance metric for vector comparisons in the vector store.",
                                "title_case": false,
                                "type": "str"
                            },
                            "namespace": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "namespace",
                                "display_name": "Namespace",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional namespace within Astra DB to use for the collection.",
                                "title_case": false,
                                "type": "str"
                            },
                            "number_of_results": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 4,
                                "name": "number_of_results",
                                "display_name": "Number of Results",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Number of results to return.",
                                "title_case": false,
                                "type": "int"
                            },
                            "pre_delete_collection": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "pre_delete_collection",
                                "display_name": "Pre Delete Collection",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "search_filter": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "search_filter",
                                "display_name": "Search Metadata Filter",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional dictionary of filters to apply to the search query.",
                                "title_case": false,
                                "type": "dict"
                            },
                            "search_input": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "search_input",
                                "display_name": "Search Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "search_score_threshold": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 0,
                                "name": "search_score_threshold",
                                "display_name": "Search Score Threshold",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                                "title_case": false,
                                "type": "float"
                            },
                            "search_type": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Similarity",
                                    "Similarity with score threshold",
                                    "MMR (Max Marginal Relevance)"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Similarity",
                                "name": "search_type",
                                "display_name": "Search Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Search type to use",
                                "title_case": false,
                                "type": "str"
                            },
                            "setup_mode": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Sync",
                                    "Async",
                                    "Off"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Sync",
                                "name": "setup_mode",
                                "display_name": "Setup Mode",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.",
                                "title_case": false,
                                "type": "str"
                            },
                            "token": {
                                "load_from_db": true,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "value": "token",
                                "name": "token",
                                "display_name": "Astra DB Application Token",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "Authentication token for accessing Astra DB.",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            }
                        },
                        "description": "Implementation of Vector Store using Astra DB with search capabilities",
                        "icon": "AstraDB",
                        "base_classes": [
                            "Data",
                            "Retriever"
                        ],
                        "display_name": "Astra DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/astradb",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Retriever"
                                ],
                                "selected": "Retriever",
                                "name": "base_retriever",
                                "display_name": "Retriever",
                                "method": "build_base_retriever",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "search_results",
                                "display_name": "Search Results",
                                "method": "search_documents",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "collection_name",
                            "token",
                            "api_endpoint",
                            "search_input",
                            "ingest_data",
                            "namespace",
                            "metric",
                            "batch_size",
                            "bulk_insert_batch_concurrency",
                            "bulk_insert_overwrite_concurrency",
                            "bulk_delete_concurrency",
                            "setup_mode",
                            "pre_delete_collection",
                            "metadata_indexing_include",
                            "embedding",
                            "metadata_indexing_exclude",
                            "collection_indexing_policy",
                            "number_of_results",
                            "search_type",
                            "search_score_threshold",
                            "search_filter"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "AstraDB-Iq4F1"
                },
                "selected": false,
                "width": 384,
                "height": 753,
                "positionAbsolute": {
                    "x": 39.35373990120081,
                    "y": 407.4184900785235
                },
                "dragging": false
            },
            {
                "id": "URL-KPPzg",
                "type": "genericNode",
                "position": {
                    "x": -1096.7551941476345,
                    "y": 1273.107505157679
                },
                "data": {
                    "type": "URL",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import re\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            info=\"Enter one or more URLs, separated by commas.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"\n        Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            raise ValueError(f\"Invalid URL: {string}\")\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "urls": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": [
                                    "https://smartschoolmis.com/"
                                ],
                                "name": "urls",
                                "display_name": "URLs",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Enter one or more URLs, separated by commas.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Fetch content from one or more URLs.",
                        "icon": "layout-template",
                        "base_classes": [
                            "Data"
                        ],
                        "display_name": "URL",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "data",
                                "display_name": "Data",
                                "method": "fetch_content",
                                "value": "__UNDEFINED__",
                                "cache": true,
                                "hidden": false
                            }
                        ],
                        "field_order": [
                            "urls"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "URL-KPPzg"
                },
                "selected": false,
                "width": 384,
                "height": 308,
                "positionAbsolute": {
                    "x": -1096.7551941476345,
                    "y": 1273.107505157679
                },
                "dragging": false
            }
        ],
        "edges": [
            {
                "source": "ChatInput-H54VO",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-H54VOœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-AN6PM",
                "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œPrompt-AN6PMœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "question",
                        "id": "Prompt-AN6PM",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-H54VO",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ChatInput-H54VO{œdataTypeœ:œChatInputœ,œidœ:œChatInput-H54VOœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-AN6PM{œfieldNameœ:œquestionœ,œidœ:œPrompt-AN6PMœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "Prompt-AN6PM",
                "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-AN6PMœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                "target": "CohereModel-4l2Yf",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-4l2Yfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "CohereModel-4l2Yf",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-AN6PM",
                        "name": "prompt",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-Prompt-AN6PM{œdataTypeœ:œPromptœ,œidœ:œPrompt-AN6PMœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-CohereModel-4l2Yf{œfieldNameœ:œinput_valueœ,œidœ:œCohereModel-4l2Yfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "CohereModel-4l2Yf",
                "sourceHandle": "{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-4l2Yfœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ChatOutput-7Nnei",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-7Nneiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-7Nnei",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "CohereModel",
                        "id": "CohereModel-4l2Yf",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-CohereModel-4l2Yf{œdataTypeœ:œCohereModelœ,œidœ:œCohereModel-4l2Yfœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-7Nnei{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-7Nneiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "Memory-v1D7b",
                "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-v1D7bœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-AN6PM",
                "targetHandle": "{œfieldNameœ:œhistoryœ,œidœ:œPrompt-AN6PMœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "history",
                        "id": "Prompt-AN6PM",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "Memory",
                        "id": "Memory-v1D7b",
                        "name": "messages_text",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-Memory-v1D7b{œdataTypeœ:œMemoryœ,œidœ:œMemory-v1D7bœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-AN6PM{œfieldNameœ:œhistoryœ,œidœ:œPrompt-AN6PMœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "CohereEmbeddings-j7UgM",
                "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-j7UgMœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                "target": "AstraDB-JiG6O",
                "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-JiG6Oœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "embedding",
                        "id": "AstraDB-JiG6O",
                        "inputTypes": [
                            "Embeddings",
                            "dict"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "CohereEmbeddings",
                        "id": "CohereEmbeddings-j7UgM",
                        "name": "embeddings",
                        "output_types": [
                            "Embeddings"
                        ]
                    }
                },
                "id": "reactflow__edge-CohereEmbeddings-j7UgM{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-j7UgMœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraDB-JiG6O{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-JiG6Oœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "SplitText-TbaEX",
                "sourceHandle": "{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-TbaEXœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}",
                "target": "AstraDB-JiG6O",
                "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œAstraDB-JiG6Oœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "ingest_data",
                        "id": "AstraDB-JiG6O",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "SplitText",
                        "id": "SplitText-TbaEX",
                        "name": "chunks",
                        "output_types": [
                            "Data"
                        ]
                    }
                },
                "id": "reactflow__edge-SplitText-TbaEX{œdataTypeœ:œSplitTextœ,œidœ:œSplitText-TbaEXœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-AstraDB-JiG6O{œfieldNameœ:œingest_dataœ,œidœ:œAstraDB-JiG6Oœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "CohereEmbeddings-j7UgM",
                "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-j7UgMœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                "target": "AstraDB-Iq4F1",
                "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-Iq4F1œ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "embedding",
                        "id": "AstraDB-Iq4F1",
                        "inputTypes": [
                            "Embeddings",
                            "dict"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "CohereEmbeddings",
                        "id": "CohereEmbeddings-j7UgM",
                        "name": "embeddings",
                        "output_types": [
                            "Embeddings"
                        ]
                    }
                },
                "id": "reactflow__edge-CohereEmbeddings-j7UgM{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-j7UgMœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraDB-Iq4F1{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-Iq4F1œ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "AstraDB-Iq4F1",
                "sourceHandle": "{œdataTypeœ:œAstraDBœ,œidœ:œAstraDB-Iq4F1œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                "target": "ParseData-qjhsy",
                "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-qjhsyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-qjhsy",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "AstraDB",
                        "id": "AstraDB-Iq4F1",
                        "name": "search_results",
                        "output_types": [
                            "Data"
                        ]
                    }
                },
                "id": "reactflow__edge-AstraDB-Iq4F1{œdataTypeœ:œAstraDBœ,œidœ:œAstraDB-Iq4F1œ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-qjhsy{œfieldNameœ:œdataœ,œidœ:œParseData-qjhsyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "ParseData-qjhsy",
                "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-qjhsyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-AN6PM",
                "targetHandle": "{œfieldNameœ:œcontextœ,œidœ:œPrompt-AN6PMœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "context",
                        "id": "Prompt-AN6PM",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ParseData",
                        "id": "ParseData-qjhsy",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ParseData-qjhsy{œdataTypeœ:œParseDataœ,œidœ:œParseData-qjhsyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-AN6PM{œfieldNameœ:œcontextœ,œidœ:œPrompt-AN6PMœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "URL-KPPzg",
                "sourceHandle": "{œdataTypeœ:œURLœ,œidœ:œURL-KPPzgœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
                "target": "SplitText-TbaEX",
                "targetHandle": "{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-TbaEXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "data_inputs",
                        "id": "SplitText-TbaEX",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "URL",
                        "id": "URL-KPPzg",
                        "name": "data",
                        "output_types": [
                            "Data"
                        ]
                    }
                },
                "id": "reactflow__edge-URL-KPPzg{œdataTypeœ:œURLœ,œidœ:œURL-KPPzgœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitText-TbaEX{œfieldNameœ:œdata_inputsœ,œidœ:œSplitText-TbaEXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "ChatInput-H54VO",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-H54VOœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "AstraDB-Iq4F1",
                "targetHandle": "{œfieldNameœ:œsearch_inputœ,œidœ:œAstraDB-Iq4F1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "search_input",
                        "id": "AstraDB-Iq4F1",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-H54VO",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ChatInput-H54VO{œdataTypeœ:œChatInputœ,œidœ:œChatInput-H54VOœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-AstraDB-Iq4F1{œfieldNameœ:œsearch_inputœ,œidœ:œAstraDB-Iq4F1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            }
        ],
        "viewport": {
            "x": 407.9311201420853,
            "y": 305.2537723674394,
            "zoom": 0.42137829929898823
        }
    },
    "description": "Your Toolkit for Text Generation.",
    "name": "Chatbot_cohere",
    "last_tested_version": "1.0.7",
    "endpoint_name": null,
    "is_component": false
}